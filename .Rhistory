library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9")
library(jsonlite)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
head(json2$results)
x<-json2$results
x[,2]<-as.numeric(x[,2])
x[,4]<-as.numeric(x[,4])
x[,5]<-as.numeric(x[,5])
x[,6]<-as.numeric(x[,6])
x[,7]<-as.numeric(x[,7])
x[,8]<-as.numeric(x[,8])
unique(x$skill_id)
par(mfrow=c(2,2))
par(mfrow=c(3,3))
require(plotrix)
skillCI<-function(skill){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
L<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
U<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
M<-correct/(correct+incorrect)
plotCI(skill, M, ui=U, li=L)
}
install.packages('plotrix')
skillCI(637)
?plotCI
require(plotrix)
?plotCI
skillCI<-function(skill){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
L<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
U<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
M<-correct/(correct+incorrect)
plotCI(skill, M, ui=U, li=L)
}
skillCI(637)
head(x)
x[,4]<-as.factor(x[,4])
skillCI(637)
library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9")
library(jsonlite)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
head(json2$results)
x<-json2$results
x[,2]<-as.numeric(x[,2])
x[,4]<-as.factor(x[,4])
x[,5]<-as.numeric(x[,5])
x[,6]<-as.numeric(x[,6])
x[,7]<-as.numeric(x[,7])
x[,8]<-as.numeric(x[,8])
head(x[,2])
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills, M, ui=U, li=L)
}
par(mfrow=c(1,1))
skillCI(c(637,638))
head(x[,5])
head(x[,4])
x[,4]<-as.factor(x[,4])
x[,4]<-as.numeric(x[,4])
x[,4]<-as.factor(x[,4])
head(x[,4])
skillCI(c(637,638))
skillCI(c(637,638,640))
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
skills<-as.factor(skills)
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills, M, ui=U, li=L)
}
skillCI(c(637,638,640))
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(as.factor(skills), M, ui=U, li=L)
}
skillCI(c(637,638,640))
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills), M, ui=U, li=L)
}
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills, M, ui=U, li=L)
}
skillCI(c(637,638,640))
?kength
?length
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(1:length(skills), M, ui=U, li=L)
}
skillCI(c(637,638,640))
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills, M, ui=U, li=L)
}
skillCI(c(637,638,640))
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(skills, M, ui=U, li=L,xlab='skill id')
}
unique(x$skill_id)
length(unique(x$skill_id))
skillCI(unique(x$skill_id)[1:9])
x[,2]<-as.numeric(x[,2])
x[,4]<-as.numeric(x[,4])
x[,5]<-as.numeric(x[,5])
x[,6]<-as.numeric(x[,6])
x[,7]<-as.numeric(x[,7])
x[,8]<-as.numeric(x[,8])
skillCI(unique(x$skill_id)[1:9])
skillCI(unique(x$skill_id)[10:17])
skillCI(unique(x$skill_id)[1:9])
unique(x$skill_id)[1:9]
unique(x$skill_id)
head(x$skill_id)
head(x)
library(httr)
library(ROAuth)
homeTL=GET("api-qa.flipped.io/data-scientist/answer-history/?course_id=9")
library(jsonlite)
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
head(json2$results)
x<-json2$results
x[,2]<-as.numeric(x[,2])
x[,4]<-as.numeric(x[,4])
x[,5]<-as.numeric(x[,5])
x[,6]<-as.numeric(x[,6])
x[,7]<-as.numeric(x[,7])
x[,8]<-as.numeric(x[,8])
skillCI(unique(x$skill_id)[1:9])
skillCI(unique(x$skill_id)[1:5])
skillCI(unique(x$skill_id)[1:4])
skillCI(unique(x$skill_id)[1:17])
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(1:length(skills), M, ui=U, li=L,xlab='skill id',axt='n')
}
skillCI(unique(x$skill_id)[1:17])
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(1:length(skills), M, ui=U, li=L,xlab='skill id',xaxt='n',ylim=c(0.5,1))
}
skillCI(unique(x$skill_id)[1:17])
skillCI<-function(skills){
L<-vector()
U<-vector()
M<-vector()
for (skill in skills){
selected<-x[x$skill_id ==skill,]
correct<-sum(selected$correct_count)
incorrect<-sum(selected$incorrect_count)
Li<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[1]
Ui<-binom.test(correct,correct+incorrect,p=0.5,alternative='t')$conf.int[2]
Mi<-correct/(correct+incorrect)
L<-rbind(L,Li)
U<-rbind(U,Ui)
M<-rbind(M,Mi)
}
plotCI(1:length(skills), M, ui=U, li=L,xlab='skill id',xaxt='n',ylim=c(min(U)-0.05,1))
axis(1,at=1:length(skills),labels=skills)
}
skillCI(unique(x$skill_id)[1:17])
?binom.test
setwd("C:/Users/primavista/Desktop/Coursera")
train<-read.csv("pml-training.csv")
head(train)
modFit<-train(classe~.,method='glm',family='binomial',data=train)
library(caret)
?train
modFit<-train(classe~.,method='glm',family='binomial',data=train,preProcess='pca')
modFit<-train(classe~.,method='rpart',data=train)
head(train)
head(train[,1:7])
head(train[,7:13])
head(train[,7:14])
head(train[,7:11])
colnames(train)
?group_by
?group
?grep
factors<-colnames(train)
grep('kurtosis')
grep('kurtosis',factors)
head(train[,grep('kurtosis',factors)])
head(train[,-grep('kurtosis',factors)])
head(train[,-c(grep('kurtosis',factors),grep('skewness',factors))])
small<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors))]
head(small)
small<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
head(small)
smallUsed<-small[,8:60]
head(smallUsed)
smallTrain<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
smallTest<-test[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
trainUsed<-smallTrain[,8:60]
testUsed<-smallTest[,8:60]
train<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
factors<-colnames(train)
smallTrain<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
smallTest<-test[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
trainUsed<-smallTrain[,8:60]
testUsed<-smallTest[,8:60]
modFit<-train(classe~.,method='glm',family='binomial',preProcess='pca',data=trainUsed)
warnings
warnings()
modFit<-train(classe~.,method='rpart',preProcess='pca',data=trainUsed)
modFit
modFit<-train(classe~.,method='rpart',data=trainUsed)
modFit<-train(classe~.,method='rf',data=trainUsed)
modelFit
modFit
install.packages('randomForest')
modFit<-train(classe~.,method='rf',data=trainUsed)
library(caret)
#reading data
train<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
#There are many variables
factors<-colnames(train)
smallTrain<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
smallTest<-test[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
trainUsed<-smallTrain[,8:60]
testUsed<-smallTest[,8:60]
modFit<-train(classe~.,method='rf',data=trainUsed)
randomForest(classe~.,data=trainUsed)
modFit<-randomForest(classe~.,data=trainUsed)
modFit
modFit$finalmodel
modFit$finalmod
modFit$finalModel
modFit[1]
modFit[2]
modFit[3]
modFit[4]
smallTrain<-train[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
smallFinal<-test[,-c(grep('kurtosis',factors),grep('skewness',factors),grep('avg',factors),grep('var',factors)
,grep('stddev',factors),grep('min',factors),grep('max',factors),grep('amplitude',factors))]
used<-smallTrain[,8:60]
inTrain<-createDataPartition(used$classe,p=0.7,list=FALSE)
trainUsed<-used[inTrain,]
testUsed<-used[-inTrain,]
finalUsed<-smallTest[,8:60]
modFit<-train(classe~.,method='rf',data=trainUsed)
modFit<-randomForest(classe~.,data=trainUsed)
modFit
?predict
predict(modFit,trainUsed)
table(predicted,trainUsed$classe)
predicted<-predict(modFit,trainUsed)
table(predicted,trainUsed$classe)
modFit
table(predicted,testUsed$classe)
predicted<-predict(modFit,testUsed)
table(predicted,trainUsed$classe)
table(predicted,testUsed$classe)
predict(modFit,finalUsed)
as.string(predict(modFit,finalUsed))
?str
?as.numeric
as.character(predict(modFit,finalUsed))
answer<-as.character(predict(modFit,finalUsed))
answer
head(finalUsed)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
answers<-as.character(predict(modFit,finalUsed))
pml_write_files(answers)
modFit
modFit[1]
modFit[2]
modFit[3]
modFit[4]
modFit[5]
setwd("C:/Users/primavista/Desktop/Coursera/PMLproject")
modFit
predicted<-predict(modFit,testUsed)
table(predicted,testUsed$classe)
?importance
importance(modFit)
